"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const enum_1 = require("../utils/enum");
const options_1 = require("../utils/options");
const string_1 = require("../utils/string");
class StyleGeneratorHelpers {
    constructor(styleItem) {
        this.styleItem = styleItem;
        this.resultText = "/*\n";
        this.resultText += "\tGenerated by Image Sprites (https://marketplace.visualstudio.com/items?itemName=gurayyarar.imagesprites)\n";
        this.resultText += "\tAuthor: GÃ¼ray Yarar (https://github.com/gurayyarar)\n";
        this.resultText += "*/\n\n";
    }
    getStyleText() {
        if (this.styleItem.options.stylesheet === enum_1.Stylesheet.Scss || this.styleItem.options.stylesheet === enum_1.Stylesheet.Less) {
            return this.scssAndLess();
        }
        else {
            return this.css();
        }
    }
    css() {
        // Background Image
        this.resultText += `.${this.styleItem.sprite_image} {\n`;
        this.resultText += "\tbackground-image: url('";
        if (this.styleItem.options.path_prefix !== "" && this.styleItem.options.path_prefix !== null) {
            this.resultText += this.styleItem.options.path_prefix;
        }
        this.resultText += `${this.styleItem.sprite_image}.sprite.${options_1.Options.getOptions().output}`;
        if (this.styleItem.options.enable_cache_busting) {
            this.resultText += `?v=${new string_1.StringUtils().getCacheBustingKey()}`;
        }
        this.resultText += "');\n";
        // Background Repeat
        this.resultText += "\tbackground-repeat: no-repeat;\n";
        // Custom Style(s)
        for (let key in this.styleItem.options.custom_styles) {
            this.resultText += `\t${key}: ${this.styleItem.options.custom_styles[key]};\n`;
        }
        this.resultText += "}\n\n";
        let coordinantY = 0, coordinantX = 0;
        this.styleItem.items.forEach((item, index) => {
            this.resultText += `.${this.styleItem.sprite_image}.${path.basename(item.file_path, path.extname(item.file_path))} {\n`;
            this.resultText += `\twidth: ${item.width}px;\n`;
            this.resultText += `\theight: ${item.height}px;\n`;
            if (this.styleItem.options.orientation === enum_1.Orientation.Vertical) {
                coordinantY += this.styleItem.options.padding;
                this.resultText += `\tbackground-position: -${this.styleItem.options.padding}px -${coordinantY}px;\n`;
                coordinantY += item.height;
            }
            else {
                coordinantX += this.styleItem.options.padding;
                this.resultText += `\tbackground-position: -${coordinantX}px -${this.styleItem.options.padding}px;\n`;
                coordinantX += item.width;
            }
            this.resultText += "}\n";
        });
        return this.resultText;
    }
    scssAndLess() {
        // Background Image
        this.resultText += `.${this.styleItem.sprite_image} {\n`;
        this.resultText += "\tbackground-image: url('";
        if (this.styleItem.options.path_prefix !== "" && this.styleItem.options.path_prefix !== null) {
            this.resultText += this.styleItem.options.path_prefix;
        }
        this.resultText += `${this.styleItem.sprite_image}.sprite.${options_1.Options.getOptions().output}`;
        if (this.styleItem.options.enable_cache_busting) {
            this.resultText += `?v=${new string_1.StringUtils().getCacheBustingKey()}`;
        }
        this.resultText += "');\n";
        // Background Repeat
        this.resultText += "\tbackground-repeat: no-repeat;\n";
        // Custom Style(s)
        for (let key in this.styleItem.options.custom_styles) {
            this.resultText += `\t${key}: ${this.styleItem.options.custom_styles[key]};\n`;
        }
        let coordinantY = 0, coordinantX = 0;
        this.styleItem.items.forEach((item, index) => {
            this.resultText += `\t&.${path.basename(item.file_path, path.extname(item.file_path))} {\n`;
            this.resultText += `\t\twidth: ${item.width}px;\n`;
            this.resultText += `\t\theight: ${item.height}px;\n`;
            if (this.styleItem.options.orientation === enum_1.Orientation.Vertical) {
                coordinantY += this.styleItem.options.padding;
                this.resultText += `\t\tbackground-position: -${this.styleItem.options.padding}px -${coordinantY}px;\n`;
                coordinantY += item.height;
            }
            else {
                coordinantX += this.styleItem.options.padding;
                this.resultText += `\t\tbackground-position: -${coordinantX}px -${this.styleItem.options.padding}px;\n`;
                coordinantX += item.width;
            }
            this.resultText += "\t}\n";
        });
        this.resultText += "}";
        return this.resultText;
    }
}
exports.StyleGeneratorHelpers = StyleGeneratorHelpers;
//# sourceMappingURL=style-generator.js.map